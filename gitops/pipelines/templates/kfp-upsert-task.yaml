apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: Upload a Pipeline to a KFP cluster
    tekton.dev/pipelines.minVersion: '0.19'
    tekton.dev/tags: 'kfp'
  name: kfp-upload
  namespace: {{ .Values.dataScienceProjectNamespace }}
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    These Task will compile and upload a Pipeline to a KFP cluster
  params:
    - description: The image used where python is installed
      name: TASK_IMAGE
      type: string
      default: quay.io/modh/runtime-images:runtime-cuda-tensorflow-ubi9-python-3.9-2023b-20240301
    - description: The pipeline python script to compile
      name: PIPELINE_NAME
      type: string
      default: deploy
    - description: The requiretments file to install
      name: REQUIREMENTS_FILE
      type: string
      default: requirements.txt
    - description: The path to the pipeline python script
      name: PIPELINES_PATH
      type: string
      default: pipeline
  results:
    - description: The Pipeline Id of the kfp pipeline uploaded
      name: PIPELINE_ID
  steps:
    - image: $(params.TASK_IMAGE)
      name: git-log
      resources: {}
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh

        REPO_PATH=$(params.REPO_PATH)

        git config --global --add safe.directory ${REPO_PATH}

        pip install gitpython

        python <<EOF
        import os
        import sys
        import git

        workspace_path = '$(workspaces.source.path)'

        # Ensure the workspace directory exists
        os.makedirs(workspace_path, exist_ok=True)

        # Define the file paths
        added_file_path = os.path.join(workspace_path, 'added')
        modified_file_path = os.path.join(workspace_path, 'modified')
        removed_file_path = os.path.join(workspace_path, 'removed')

        # Initialize lists to hold file paths
        added_files = []
        modified_files = []
        removed_files = []

        # Path to your git repository
        # repo_path = os.environ.get('REPO_PATH')
        repo_path = workspace_path

        # Open the repository
        repo = git.Repo(repo_path)

        # Get the latest commit
        commit = repo.head.commit

        # Process the files in the latest commit
        for diff in commit.diff('HEAD~1'):
            if diff.change_type == 'A':
                added_files.append(diff.b_path)
            elif diff.change_type == 'M':
                modified_files.append(diff.b_path)
            elif diff.change_type == 'R':
                removed_files.append(diff.b_path)

        # Write the file paths to the respective files
        with open(added_file_path, 'w') as f:
            f.write(','.join(added_files))

        with open(modified_file_path, 'w') as f:
            f.write(','.join(modified_files))

        with open(removed_file_path, 'w') as f:
            f.write(','.join(removed_files))

        print("Files written successfully.")

        EOF

    - image: $(params.TASK_IMAGE)
      name: compile
      resources: {}
      workingDir: $(workspaces.source.path)
      env:
        - name: PIPELINE_NAME
          value: $(params.PIPELINE_NAME)
        - name: PIPELINES_PATH
          value: $(params.PIPELINES_PATH)
      script: |
        #!/bin/sh

        MODIFIED_FILES=$(cat /workspace/source/modified)
        ADDED_FILES=$(cat /workspace/source/added)
        REMOVED_FILES=$(cat /workspace/source/removed)

        echo "Compiling pipeline $(params.PIPELINE_NAME).yaml"

        echo "Current directory"
        pwd

        echo "List files"
        ls -lstrh

        cd $(params.PIPELINES_PATH)

        pip install -r $(params.REQUIREMENTS_FILE)

        # Upload the pipeline
        export NAMESPACE_NAME="$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)"
        export TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
        export PIPELINE_NAME="$(params.PIPELINE_NAME)"

        echo "NAMESPACE_NAME: $NAMESPACE_NAME PIPELINE_NAME: $PIPELINE_NAME TOKEN: $TOKEN"

        python $(params.PIPELINE_NAME).py
  workspaces:
    - mountPath: /workspace/source
      name: source
