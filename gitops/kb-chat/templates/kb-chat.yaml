apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/compare-options: >
      ContainerImage:
        ignoreDifferences: |
          jsonPointers:
            - /spec/template/spec/containers/*/image
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: "false"
    app.openshift.io/vcs-ref: {{ .Values.vcs.ref }}
    app.openshift.io/vcs-uri: {{ .Values.vcs.uri }}
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"kb-chat:latest","namespace":"{{ .Values.namespace }}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"kb-chat\")].image","pause":"false"}]'
  labels:
    app: kb-chat
    app.kubernetes.io/component: kb-chat
    app.kubernetes.io/instance: kb-chat
    app.kubernetes.io/name: kb-chat
    app.kubernetes.io/part-of: kb-chat
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.9-ubi8
  name: kb-chat
  namespace: {{ .Values.namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kb-chat
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kb-chat
        deployment: kb-chat
    spec:
      serviceAccountName: kb-chat
      containers:
        - envFrom:
            - secretRef:
                name: kb-chat-env
          image: image-registry.openshift-image-registry.svc:5000/{{ .Values.namespace }}/kb-chat:latest
          imagePullPolicy: Always
          name: kb-chat
          ports:
            - containerPort: 8080
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    app.openshift.io/vcs-ref: {{ .Values.vcs.ref }}
    app.openshift.io/vcs-uri: {{ .Values.vcs.uri }}
  labels:
    app: kb-chat
    app.kubernetes.io/component: kb-chat
    app.kubernetes.io/instance: kb-chat
    app.kubernetes.io/name: kb-chat
    app.kubernetes.io/part-of: kb-chat
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.9-ubi8
  name: kb-chat
  namespace: {{ .Values.namespace }}
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: 7860-tcp
      port: 7860
      protocol: TCP
      targetPort: 7860
  selector:
    app: kb-chat
    deployment: kb-chat
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
stringData:
  APP_TITLE: "Chat with your Knowledge Base!"
  SHOW_TITLE_IMAGE: "True"
  MODEL_NAME: "/mnt/models/"
  MAX_TOKENS: "1024"
  TOP_P: "0.95"
  TEMPERATURE: "0.01"
  PRESENCE_PENALTY: "1.03"
  MILVUS_HOST: "{{ .Values.milvus.host }}"
  MILVUS_PORT: "{{ .Values.milvus.port }}"
  MILVUS_USERNAME: "{{ .Values.milvus.username }}"
  MILVUS_PASSWORD: "{{ .Values.milvus.password }}"
  MILVUS_COLLECTIONS_FILE: "./collections.json"
  DEFAULT_COLLECTION: "none"
  PROMPT_FILE: "default_prompt.txt"
  MAX_RETRIEVED_DOCS: "4"
  SCORE_THRESHOLD: "0.99"
  PREDICTOR_NAME: "{{ .Values.model.name }}"
kind: Secret
metadata:
  labels:
    app: kb-chat
  name: kb-chat-env
  namespace: {{ .Values.namespace }}
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: kb-chat-prompts
  namespace: {{ .Values.namespace }}
type: Opaque
stringData:
  default-prompt.txt: |
    <s>[INST] <<SYS>>
    You are a helpful, respectful and honest assistant answering questions named HatBot .
    You will be given a question you need to answer, and sometimes a context to provide you with information. You must answer the question based as much as possible on this context if it exists.
    Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.

    If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information.
    <</SYS>>

    Context: 
    {context}

    Question: {question} [/INST]
---
apiVersion: v1
data:
  WebHookSecretKey: ZmIzNGU3NTUyNDE3OTM1Zg==
kind: Secret
metadata:
  labels:
    app: kb-chat
    app.kubernetes.io/component: kb-chat
    app.kubernetes.io/instance: kb-chat
    app.kubernetes.io/name: kb-chat
    app.kubernetes.io/part-of: kb-chat
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.9-ubi8
  name: kb-chat-generic-webhook-secret
  namespace: {{ .Values.namespace }}
type: Opaque
---
apiVersion: v1
data:
  WebHookSecretKey: N2E5MTA3ZTY0MzQ5MzM0NQ==
kind: Secret
metadata:
  labels:
    app: kb-chat
    app.kubernetes.io/component: kb-chat
    app.kubernetes.io/instance: kb-chat
    app.kubernetes.io/name: kb-chat
    app.kubernetes.io/part-of: kb-chat
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.9-ubi8
  name: kb-chat-github-webhook-secret
  namespace: {{ .Values.namespace }}
type: Opaque
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    app.openshift.io/vcs-ref: {{ .Values.vcs.ref }}
    app.openshift.io/vcs-uri: {{ .Values.vcs.uri }}
  labels:
    app: kb-chat
    app.kubernetes.io/component: kb-chat
    app.kubernetes.io/instance: kb-chat
    app.kubernetes.io/name: kb-chat
    app.kubernetes.io/part-of: kb-chat
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.9-ubi8
  name: kb-chat
  namespace: {{ .Values.namespace }}
spec:
  lookupPolicy:
    local: false
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    app.openshift.io/vcs-ref: {{ .Values.vcs.ref }}
    app.openshift.io/vcs-uri: {{ .Values.vcs.uri }}
  labels:
    app: kb-chat
    app.kubernetes.io/component: kb-chat
    app.kubernetes.io/instance: kb-chat
    app.kubernetes.io/name: kb-chat
    app.kubernetes.io/part-of: kb-chat
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.9-ubi8
  name: kb-chat
  namespace: {{ .Values.namespace }}
spec:
  failedBuildsHistoryLimit: 5
  output:
    to:
      kind: ImageStreamTag
      name: kb-chat:latest
  runPolicy: Serial
  source:
    sourceSecret:
      name: {{ .Values.vcs.sourceSecret }}
    contextDir: {{ .Values.vcs.path }}
    git:
      uri: {{ .Values.vcs.uri }}
      ref: {{ .Values.vcs.ref }}
    type: Git
  strategy:
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: python:3.9-ubi8
        namespace: openshift
    type: Source
  successfulBuildsHistoryLimit: 5
  triggers:
    - generic:
        secretReference:
          name: kb-chat-generic-webhook-secret
      type: Generic
    - github:
        secretReference:
          name: kb-chat-github-webhook-secret
      type: GitHub
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: kb-chat
    app.kubernetes.io/component: kb-chat
    app.kubernetes.io/instance: kb-chat
    app.kubernetes.io/name: kb-chat
    app.kubernetes.io/part-of: kb-chat
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.9-ubi8
  name: kb-chat
  namespace: {{ .Values.namespace }}
spec:
  port:
    targetPort: 7860-tcp
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: kb-chat
    weight: 100
  wildcardPolicy: None
